# -*- coding: utf-8 -*-
"""webapp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1X0QNtxbE_sYU9rGSP4ZIPqGXgjjyXyLG
"""
# Commented out IPython magic to ensure Python compatibility.

#%%writefile app.py
import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf

unet_model = tf.keras.models.load_model(r"C:\major\unet_best_model.h5")
cnn_model = tf.keras.models.load_model(r"C:\major\saved_model.h5")
labels = {0: 'Mild', 1: 'Moderate', 2: 'No_DR', 3: 'Proliferate_DR', 4: 'Severe'}

def segmentation_prediction(img):
    img = tf.keras.preprocessing.image.img_to_array(tf.keras.preprocessing.image.load_img(img, target_size=(128, 128))) / 255.0
    img = np.expand_dims(img, axis=0)
    prediction = unet_model.predict(img)
    mask = np.argmax(prediction[0], axis=-1)
    plt.imshow(mask, cmap='gray')
    plt.axis('off')
    plt.imsave("img.jpg", mask, cmap='gray')

def class_prediction(img):
    img = tf.keras.preprocessing.image.load_img("img.png", target_size=(128, 128), color_mode='grayscale' )
    x = tf.keras.preprocessing.image.img_to_array(img)
    x = x / 255.0
    x = np.expand_dims(x, axis=0)
    images = np.vstack([x])
    cls_prob = cnn_model.predict(images)
    d = dict(zip(list(labels.values()),cls_prob.ravel().tolist()))
    d = {i:round(j,2) for i,j in d.items()}
    return d


# Set up Streamlit app
st.title("Diabetic Retinopathy Classification")

# Upload image through Streamlit
uploaded_file = st.file_uploader("Choose an image...", type=["jpg", "png", "jpeg"])

if st.button('Predict'):
    if uploaded_file is not None:
        # Display the uploaded image
        st.image(uploaded_file, caption="Input Image...", use_column_width=True)

        # Save the uploaded image to current folder as img.png
        with open("img.png", "wb") as f:
            f.write(uploaded_file.getbuffer())

        segmentation_prediction("img.png")
        path = "img.jpg"
        st.image(path, caption="segmented image", use_column_width=True)
        d = class_prediction(path)

        # Display prediction
        st.markdown(f"**Predicted Class prob: {d}**")
